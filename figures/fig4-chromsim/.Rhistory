}
#load in chromosome data
chroms <- read.csv("../../data/chroms.csv")
#load in range size
bm <- read.csv("../../data/body_mass/body_mass.csv")
#change column names to be informative
colnames(bm) <- c("species", "body.mass")
dat.pruned <- bm
#add empty third column for chromosome number
dat.pruned[, 3]  <- NA
#name the third column
colnames(dat.pruned)[3] <- "hap.chrom"
# Columns are out of order lets fix them immediately
dat.pruned <- dat.pruned[, c(1, 3, 2)]
#this loop creates 100 datasets, sampling a chromosome number for each species
#when there is more than one
datalist <- list()
for(j in 1:100){
for(i in 1:nrow(bm)){
hit <- which(chroms$species == bm$species[i])
if(length(hit) > 1){
hit <- sample(hit, 1)
}
dat.pruned$hap.chrom[i] <- chroms[hit, 2]
}
datalist[[j]] <- dat.pruned
}
missing <- trees[[1]]$tip.label[!trees[[1]]$tip.label %in% datalist[[1]]$species]
#empty list to store pruned trees
trees.pruned <- list()
#empty vector to store tree depths
#keep tree depths to correct for depth when analysing rates
tree.depths <- c()
#loop that drops missing tips and stores tree depths for further use
for(i in 1:100){
cur.tree <- drop.tip(trees[[i]], tip = missing)
tree.depths[i] <- max(branching.times(cur.tree))
# a rounding error also makes tree 52 fail due to a multitomy in the genus
# pusa
if(i == 52){
cur.tree <- multi2di(cur.tree)
}
cur.tree$edge.length <-  cur.tree$edge.length / max(branching.times(cur.tree))
trees.pruned[[i]] <- cur.tree
}
#rm old data and clean up environment
rm(trees, cur.tree, i, j, missing, chroms, dat.pruned, bm, hit)
setwd("~/Documents/GitHub/carnivores/scripts")
library(phytools)
library(chromePlus)
library(diversitree)
library(doMC)
###LOAD IN DATA###--------------------------------------------------------------
#load in tree data
trees <- read.nexus("../data/range_size/carnivora_rs_pruned.nex")
#load in binary trait data
load("../data/range_size/datalists_range.RData")
#load in tree depths
tree.depths <- read.csv("../data/range_size/rs_treedepths.csv")
colnames(tree.depths) <- c("tree", "tree.depth")
#load in tree data
trees <- read.nexus("../data/range_size/carnivora_rs_pruned.nex")
#load in binary trait data
load("../data/range_size/datalists_rangesize.RData")
#load in tree depths
tree.depths <- read.csv("../data/range_size/rs_treedepths.csv")
colnames(tree.depths) <- c("tree", "tree.depth")
#assign prior from exponential distribution
prior <- make.prior.exponential(2)
# from primary analysis we can get our w
w <- c(14.44759, 12.13979, 16.06275, 14.23117, 2.477789, 3.194005)
setwd("~/Documents/GitHub/carnivores/scripts/pop_dens")
pd <- read.csv("../../data/pop_dens/pop_dens.csv")
#look at a histagram of the data
hist(pd$Pop.Density.Correction, breaks =200)
#adds a line to the histogram where the median is
abline(v = median(pd$Pop.Density.Correction, na.rm = T), col = "red")
#calculates the median of the range data
median <- median(pd$Pop.Density.Correction, na.rm = T)
#assigns the range values into two groups for the model.
pd[,5] <- pd[,4] < median
#changes T/F to 1/0
pd$V5[pd$V5 == "TRUE"] <- 1
#read in the csv file with data
pd <- read.csv("../../data/pop_dens/pop_dens.csv")
hist(pd$Pop.Density.Correction, breaks =200)
#adds a line to the histogram where the median is
abline(v = median(pd$Pop.Density.Correction, na.rm = T), col = "red")
#calculates the median of the range data
median <- median(pd$Pop.Density.Correction, na.rm = T)
#assigns the range values into two groups for the model.
pd[,5] <- pd[,4] < median
#changes T/F to 1/0
pd$V5[pd$V5 == "TRUE"] <- 1
setwd("~/Documents/GitHub/carnivores/scripts/range_size")
#read in the csv file with data
range <- read.csv("../../data/range_size/range_size.csv")
#look at a histagram of the data
hist(range$x, breaks =200)
#adds a line to the histogram where the median is
abline(v = median(range$x), col = "red")
#calculates the median of the range data
median <- median(range$x)
#assigns the range values into two groups for the model.
range[,3] <- range[,2] < median
#changes T/F to 1/0
range$V3[range$V3 == "TRUE"] <- 1
load("../results/summarized_scalar_outputs.RData")
#### PLOT ####
# back-to-back barplot
scalar.state <- ggplot(data = scalars.summarized,
aes(x = family,
y = proportion,
fill = scalar.state))+
geom_bar(data = subset(scalars.summarized,
scalar.state == "Elevated"),
stat = "identity")+
geom_bar(data = subset(scalars.summarized,
scalar.state == "Depressed"),
aes(y = -proportion),
stat = "identity")+
xlab("")+
ylab("Proportion of Family in Each State")+
labs(fill = "State of Chromosome \n\ Number Evolution")+
geom_hline(yintercept=0,
linetype="dashed",
color = "black")
#### PACKAGES ####
library(viridis)
library(ggplot2)
#### LOAD DATA ####
load("../results/summarized_scalar_outputs.RData")
setwd("~/Documents/GitHub/carnivores/figures/fig3")
#### PACKAGES ####
library(viridis)
library(ggplot2)
#### LOAD DATA ####
load("../results/summarized_scalar_outputs.RData")
#### LOAD DATA ####
load("../../results/summarized_scalar_outputs.RData")
#### PLOT ####
# back-to-back barplot
scalar.state <- ggplot(data = scalars.summarized,
aes(x = family,
y = proportion,
fill = scalar.state))+
geom_bar(data = subset(scalars.summarized,
scalar.state == "Elevated"),
stat = "identity")+
geom_bar(data = subset(scalars.summarized,
scalar.state == "Depressed"),
aes(y = -proportion),
stat = "identity")+
xlab("")+
ylab("Proportion of Family in Each State")+
labs(fill = "State of Chromosome \n\ Number Evolution")+
geom_hline(yintercept=0,
linetype="dashed",
color = "black")
ggplot(data = scalars.summarized,
aes(x = family,
y = proportion,
fill = scalar.state))+
geom_bar(data = subset(scalars.summarized,
scalar.state == "Elevated"),
stat = "identity")+
geom_bar(data = subset(scalars.summarized,
scalar.state == "Depressed"),
aes(y = -proportion),
stat = "identity")+
xlab("")+
ylab("Proportion of Family in Each State")+
labs(fill = "State of Chromosome \n\ Number Evolution")+
geom_hline(yintercept=0,
linetype="dashed",
color = "black")
#save
ggsave(scalar.state,
filename = paste0("../figures/fig3/fig3_scalar_rates.pdf"),
width = 14,
height = 7,
units = "in")
#save
ggsave(scalar.state,
filename = paste0("fig3_scalar_rates.pdf"),
width = 14,
height = 7,
units = "in")
ggsave(scalar.state,
filename = paste0("fig3_scalar_rates.jpg"),
width = 14,
height = 7,
units = "in")
ggsave(scalar.state,
filename = paste0("fig3_scalar_rates.png"),
width = 14,
height = 7,
units = "in")
dat <- read.csv("../../results/tiprates.csv")[,-1]
dat[dat$range.size == 0, ]$range.size <- "Small"
dat[dat$range.size == 1, ]$range.size <- "Large"
library(beeswarm)
beeswarm(dat$tip.rate~dat$range.size)
boxplot(log(dat$tip.rate + 1) ~ dat$range.size,
xlab = "Range Size",
ylab = "Tip Rate")
stripchart(log(dat$tip.rate) ~ dat$range.size,
method = "jitter",
pch = 19,
col = c("#39568CFF", "#FDE725FF"),
vertical = T,
add = T)
setwd("~/Documents/GitHub/carnivores/figures/fig4")
###LOAD IN AND PRUNE DATA###----------------------------------------------------
dat <- read.csv("../../results/tiprates.csv")[,-1]
dat[dat$range.size == 0, ]$range.size <- "Small"
View(dat)
library(tidyr)
library(ggplot2)
library(stringr)
#read in the simulation of chromosme number results
chroms <- read.csv("../../results/carn_delta_sim.csv")
chroms <- chroms[,-1]
#load in chromosome data from epirical dataset
chroms.num <- read.csv("../../data/chroms.csv")
#load in range size data from empirical dataset
range.num <- read.csv("../../results/calc_carn_range_sizes.csv")
#vector to store the final empirical chromosome number dataset
hap.chrom <- c()
#loop to prune the chromsome number to those in the final chromosome number
#dataset
for(i in 1:nrow(range.num)){
hit <- which(chroms.num$species == range.num$X[i])
if(length(hit) > 1){
hit <- sample(hit, 1)
}
hap.chrom[i] <- chroms.num[hit, 2]
}
#bind the empirical chromosome number data into the simulatio chromosome
#number data
chrom_all <- cbind(chroms, hap.chrom)
#add column names to the chromosome number data
colnames(chrom_all) <- c(paste("Tree", rep(1:100)), "Emp")
#plotting
#plot the first trees density
plot(density(chrom_all[,1]),
lwd=.2,
ylim=c(0,.7),
xlim=c(7,44),
xlab = "Chromosome Number",
ylab = "Density",
main = "")
#plot the other 100 trees of density
for(i in 2:101){
if(i!=101){
lines(density(chrom_all[,i]), lwd=.2)
}else{
#makes the empirical dataset (column 101) stand out with a thick red line
lines(density(chrom_all[,i]), lwd=2,col="red")
}
}
#read in the simulation of chromosme number results
chroms <- read.csv("../../results/carn_delta_sim.csv")
chroms <- chroms[,-1]
#load in chromosome data from epirical dataset
chroms.num <- read.csv("../../data/chroms.csv")
#load in range size data from empirical dataset
range.num <- read.csv("../../results/calc_carn_range_sizes.csv")
#vector to store the final empirical chromosome number dataset
hap.chrom <- c()
#loop to prune the chromsome number to those in the final chromosome number
#dataset
for(i in 1:nrow(range.num)){
hit <- which(chroms.num$species == range.num$X[i])
if(length(hit) > 1){
hit <- sample(hit, 1)
}
hap.chrom[i] <- chroms.num[hit, 2]
}
#bind the empirical chromosome number data into the simulatio chromosome
#number data
chrom_all <- cbind(chroms, hap.chrom)
#read in the libraries needed to plot
library(tidyr)
library(ggplot2)
library(stringr)
#read in the simulation of chromosme number results
chroms <- read.csv("../../results/carn_delta_sim.csv")
chroms <- chroms[,-1]
#load in chromosome data from empirical dataset
chroms.num <- read.csv("../../data/chroms.csv")
#load in range size data from empirical dataset
range.num <- read.csv("../../results/calc_carn_range_sizes.csv")
#vector to store the final empirical chromosome number dataset
hap.chrom <- c()
#loop to prune the chromsome number to those in the final chromosome number
#dataset
for(i in 1:nrow(range.num)){
hit <- which(chroms.num$species == range.num$X[i])
if(length(hit) > 1){
hit <- sample(hit, 1)
}
hap.chrom[i] <- chroms.num[hit, 2]
}
View(chroms)
#read in the simulation of chromosme number results
chroms <- read.csv("../../results/carn_delta_sim.csv")
View(chroms)
chroms <- chroms[,-1]
setwd("~/Documents/GitHub/carnivores/scripts")
library(phytools)
library(chromePlus)
library(diversitree)
library(doMC)
###LOAD IN DATA###--------------------------------------------------------------
#load in tree data
trees <- read.nexus("../data/carnivora.nex")
for(i in 1:100){
#trees are ultrametric, this line corrects for the fact that the tolerance
#for being ultrametric is not met by some trees
trees[[i]] <- force.ultrametric(trees[[i]], method = "extend")
}
#load in chromosome data
chroms <- read.csv("../data/chroms.csv")
#load in range size
range <- read.csv("../results/calc.carn.range.sizes.csv")
#change column names to be informative
colnames(range) <- c("species", "range.size")
#load in range size
range <- read.csv("../results/calc_carn_range_sizes.csv")
#change column names to be informative
colnames(range) <- c("species", "range.size")
###PRUNE DATA###----------------------------------------------------------------
#prune chromosome number and combnine with range size
dat.pruned <- range
#add empty third column for chromosome number
dat.pruned[, 3]  <- NA
#name the third column
colnames(dat.pruned)[3] <- "hap.chrom"
#columns are out of order lets fix them immediately
dat.pruned <- dat.pruned[, c(1, 3, 2)]
#this loop creates 100 datasets, sampling a chromosome number for each species
#when there is more than one
datalist <- list()
for(j in 1:100){
for(i in 1:nrow(range)){
hit <- which(chroms$species == range$species[i])
if(length(hit) > 1){
hit <- sample(hit, 1)
}
dat.pruned$hap.chrom[i] <- chroms[hit, 2]
}
datalist[[j]] <- dat.pruned
}
#prune and scale trees
#find tips that are missing from the dataset
missing <- trees[[1]]$tip.label[!trees[[1]]$tip.label %in% datalist[[1]]$species]
#empty list to store pruned trees
trees.pruned <- list()
#loop that drops missing tips and stores tree depths for further use
for(i in 1:100){
cur.tree <- drop.tip(trees[[i]], tip = missing)
if(i == 52){
cur.tree <- multi2di(cur.tree)
}
trees.pruned[[i]] <- cur.tree
}
#rm old data and clean up environment
rm(trees, cur.tree, i, j, missing, chroms, dat.pruned, range, hit)
###DISCRETIZE RANGE SIZES###----------------------------------------------------
#discretize range size based on the median
for(i in 1:100){
x <- median(datalist[[1]]$range.size)
datalist[[i]]$range.size <- as.numeric(datalist[[1]]$range.size >= x)
}
#0 = small; 1 = large pop size
rm(i, x)
chrom.range <- range(datalist[[52]]$hap.chrom) + c(-1, 1) #(15, 40)
chrom.range <- as.numeric(chrom.range)
median <- median(datalist[[52]]$hap.chrom) #19
#load in the results from running the chromplus model
results <- read.csv("../results/carn_delta_sim.csv")
#create a list to store simChrom results in
results.sim <- list()
#create a list to store simChrom results in
results.sim <- list()
#loop through to create the rates needed as input into simChrom and run
#the chromosome simulations across the carnivore data
for(i in 1:100){
#store sampling a row from the ChromPlus results to give rates needed
#for the simChrom simulations
hit <- sample(1:nrow(results), 1)
#create the parameters vector needed for simChrom simulations
pars <- unlist(c(results[hit, c(2,4,3,5)],
0,0,0,0,
results[hit, 6:7],
median,sample(0:1,1,.5)))
#runs simChrom simulations and stores in results.sim
results.sim[[i]] <- simChrom(tree=trees.pruned[[i]],
pars=pars,
limits=c(1,100),
model="ChromPlus" )
}
View(results)
#load in the results from running the chromplus model
results <- read.csv("../results/carn_delta_sim.csv")
#create a list to store simChrom results in
results.sim <- list()
#loop through to create the rates needed as input into simChrom and run
#the chromosome simulations across the carnivore data
for(i in 1:100){
#store sampling a row from the ChromPlus results to give rates needed
#for the simChrom simulations
hit <- sample(1:nrow(results), 1)
#create the parameters vector needed for simChrom simulations
pars <- unlist(c(results[hit, c(2,4,3,5)],
0,0,0,0,
results[hit, 6:7],
median,sample(0:1,1,.5)))
#runs simChrom simulations and stores in results.sim
results.sim[[i]] <- simChrom(tree=trees.pruned[[i]],
pars=pars,
limits=c(1,100),
model="ChromPlus" )
}
#load in the results from running the chromplus model
results <- read.csv("../results/carn_med_hb.csv")
#create a list to store simChrom results in
results.sim <- list()
#loop through to create the rates needed as input into simChrom and run
#the chromosome simulations across the carnivore data
for(i in 1:100){
#store sampling a row from the ChromPlus results to give rates needed
#for the simChrom simulations
hit <- sample(1:nrow(results), 1)
#create the parameters vector needed for simChrom simulations
pars <- unlist(c(results[hit, c(2,4,3,5)],
0,0,0,0,
results[hit, 6:7],
median,sample(0:1,1,.5)))
#runs simChrom simulations and stores in results.sim
results.sim[[i]] <- simChrom(tree=trees.pruned[[i]],
pars=pars,
limits=c(1,100),
model="ChromPlus" )
}
View(results)
#load in the results from running the chromplus model
results <- read.csv("../results/carn_med_hb.csv")
View(results)
#create a list to store simChrom results in
results.sim <- list()
#loop through to create the rates needed as input into simChrom and run
#the chromosome simulations across the carnivore data
for(i in 1:100){
#store sampling a row from the ChromPlus results to give rates needed
#for the simChrom simulations
hit <- sample(1:nrow(results), 1)
#create the parameters vector needed for simChrom simulations
pars <- unlist(c(results[hit, c(2,4,3,5)],
0,0,0,0,
results[hit, 6:7],
median,sample(0:1,1,.5)))
#runs simChrom simulations and stores in results.sim
results.sim[[i]] <- simChrom(tree=trees.pruned[[i]],
pars=pars,
limits=c(1,100),
model="ChromPlus" )
}
#read in the simulation of chromosme number results
chroms <- read.csv("../../results/simulation_chroms.csv")
setwd("~/Documents/GitHub/carnivores/figures/fig4")
#read in the simulation of chromosme number results
chroms <- read.csv("../../results/simulation_chroms.csv")
chroms <- chroms[,-1]
#load in chromosome data from empirical dataset
chroms.num <- read.csv("../../data/chroms.csv")
#load in range size data from empirical dataset
range.num <- read.csv("../../results/calc_carn_range_sizes.csv")
#vector to store the final empirical chromosome number dataset
hap.chrom <- c()
#loop to prune the chromsome number to those in the final chromosome number
#dataset
for(i in 1:nrow(range.num)){
hit <- which(chroms.num$species == range.num$X[i])
if(length(hit) > 1){
hit <- sample(hit, 1)
}
hap.chrom[i] <- chroms.num[hit, 2]
}
#bind the empirical chromosome number data into the simulatio chromosome
#number data
chrom_all <- cbind(chroms, hap.chrom)
#add column names to the chromosome number data
colnames(chrom_all) <- c(paste("Tree", rep(1:100)), "Emp")
#plot the first trees density
plot(density(chrom_all[,1]),
lwd=.2,
ylim=c(0,.7),
xlim=c(7,44),
xlab = "Chromosome Number",
ylab = "Density",
main = "")
#plot the other 100 trees of density
for(i in 2:101){
if(i!=101){
lines(density(chrom_all[,i]), lwd=.2)
}else{
#makes the empirical dataset (column 101) stand out with a thick red line
lines(density(chrom_all[,i]), lwd=2,col="red")
}
}
